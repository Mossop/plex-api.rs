# Based on https://github.com/actions-rs/meta/blob/master/recipes/quickstart.md

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

name: Test everything

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-check-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

  test_offline:
    needs: check
    name: Offline tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all

  lints:
    name: Lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-clippy-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy with warnings
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

      - name: Clippy with nursery & tests
        uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: clippy
          args: --all-targets --tests --all-features -- -D clippy::nursery -D warnings

  test_on_real_server_anonymous:
    needs: test_offline
    name: Test on a real server (anonymous)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plex_server_version:
          - latest
          - 1.16.6.1592-b9d49bdb7
          - 1.13.9.5456-ecd600442
          - 1.10.1.4602-f54242b6b
    env:
      X_PLEX_CLIENT_IDENTIFIER: ${{ secrets.X_PLEX_CLIENT_IDENTIFIER }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-test-online-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Plex Server
        run: |
          ./plex-stub-data/media/configure.sh

          docker run -d \
            --network=host \
            -e TZ=UTC \
            -v `pwd`/plex-stub-data/config:/config \
            -v `pwd`/plex-stub-data/transcode:/transcode \
            -v `pwd`/plex-stub-data/media:/data \
            plexinc/pms-docker:${{ matrix.plex_server_version }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build plex-cli binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p plex-cli

      - name: Wait for plex-server to boot
        run: target/debug/plex-cli wait --timeout 120 --server-url http://127.0.0.1:32400 -s

      - name: Test against real server [anonymous]
        uses: actions-rs/cargo@v1
        env:
          PLEX_API_SERVER_URL: http://127.0.0.1:32400
        with:
          command: test
          args: --manifest-path plex-api/Cargo.toml --features 'test_connect_anonymous'

      - name: Run the same tests with checks for new attributes
        uses: actions-rs/cargo@v1
        continue-on-error: true
        env:
          PLEX_API_SERVER_URL: http://127.0.0.1:32400
        with:
          command: test
          args: --manifest-path plex-api/Cargo.toml --features 'test_new_attributes,test_connect_anonymous'

  test_on_real_server_authenticated:
    if: github.ref == 'refs/heads/master'
    needs: test_offline
    name: Test on a real server (authenticated)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plex_server_version:
          - latest
          - 1.16.6.1592-b9d49bdb7
          - 1.13.9.5456-ecd600442
          - 1.10.1.4602-f54242b6b
    env:
      X_PLEX_CLIENT_IDENTIFIER: ${{ secrets.X_PLEX_CLIENT_IDENTIFIER }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-test-online-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Build plex-cli binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p plex-cli

      - name: Get claim-token
        env:
          PLEX_API_AUTH_TOKEN: ${{ secrets.PLEX_API_AUTH_TOKEN }}
        run: |
          PLEX_CLAIM=$(target/debug/plex-cli token)
          echo ::add-mask::${PLEX_CLAIM}
          echo ::set-env name=PLEX_CLAIM::${PLEX_CLAIM}

      - name: Run Plex Server
        run: |
          PLEX_DOCKER_MACHINE_NAME="plex-test-docker-$(uuidgen)"
          echo ::set-env name=PLEX_DOCKER_MACHINE_NAME::${PLEX_DOCKER_MACHINE_NAME}

          ./plex-stub-data/media/configure.sh

          docker run -d \
            --name="${PLEX_DOCKER_MACHINE_NAME}" \
            --network=host \
            -e TZ=UTC \
            -e PLEX_CLAIM="${PLEX_CLAIM}" \
            -v `pwd`/plex-stub-data/config:/config \
            -v `pwd`/plex-stub-data/transcode:/transcode \
            -v `pwd`/plex-stub-data/media:/data \
            plexinc/pms-docker:${{ matrix.plex_server_version }}

      - name: Wait for plex-server to boot
        env:
          PLEX_API_AUTH_TOKEN: ${{ secrets.PLEX_API_AUTH_TOKEN }}
        run: target/debug/plex-cli wait --timeout 120 --server-url http://127.0.0.1:32400 -s

      - name: Test against real server [authenticated]
        uses: actions-rs/cargo@v1
        env:
          PLEX_API_SERVER_URL: http://127.0.0.1:32400
          PLEX_API_AUTH_TOKEN: ${{ secrets.PLEX_API_AUTH_TOKEN }}
        with:
          command: test
          args: --manifest-path plex-api/Cargo.toml --features 'test_connect_authenticated'

      - name: Run the same tests with checks for new attributes
        uses: actions-rs/cargo@v1
        continue-on-error: true
        env:
          PLEX_API_SERVER_URL: http://127.0.0.1:32400
          PLEX_API_AUTH_TOKEN: ${{ secrets.PLEX_API_AUTH_TOKEN }}
        with:
          command: test
          args: --manifest-path plex-api/Cargo.toml --features 'test_new_attributes,test_connect_authenticated'

      - name: Remove the server from the account
        if: always()
        continue-on-error: true
        env:
          PLEX_API_AUTH_TOKEN: ${{ secrets.PLEX_API_AUTH_TOKEN }}
        run: |
          if [ -n "PLEX_CLAIM" ] && [ -n "$PLEX_DOCKER_MACHINE_NAME" ]
          then
            target/debug/plex-cli unclaim --server-url http://127.0.0.1:32400
          fi

  collect_coverage:
    needs: check
    name: Collect code coverage (with anonymous server)
    runs-on: ubuntu-latest
    env:
      X_PLEX_CLIENT_IDENTIFIER: ${{ secrets.X_PLEX_CLIENT_IDENTIFIER }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v1

      - name: Run Plex Server
        run: |
          ./plex-stub-data/media/configure.sh

          docker run -d \
            --network=host \
            -e TZ=UTC \
            -v `pwd`/plex-stub-data/config:/config \
            -v `pwd`/plex-stub-data/transcode:/transcode \
            -v `pwd`/plex-stub-data/media:/data \
            plexinc/pms-docker:latest

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Wait for plex-server to boot
        uses: actions-rs/cargo@v1
        with:
          command: run
          args: -p plex-cli -- wait --timeout 120 --server-url http://127.0.0.1:32400 -s

      - name: Clean cargo cache
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Test against real server [anonymous]
        uses: actions-rs/cargo@v1
        env:
          PLEX_API_SERVER_URL: http://127.0.0.1:32400
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Cpanic=abort'
        with:
          command: test
          args: --manifest-path plex-api/Cargo.toml  --no-fail-fast --features 'test_connect_anonymous'

      - id: coverage
        name: Run grcov
        uses: actions-rs/grcov@v0.1

      - name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}
